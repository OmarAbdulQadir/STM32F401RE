
01-GPIO-Test01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000028c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000420  08000420  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000420  08000420  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08000420  08000420  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000420  08000420  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000420  08000420  00010420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000424  08000424  00010424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08000428  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000018  08000440  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  08000440  00020034  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 13 .debug_info   000004e8  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000249  00000000  00000000  00020573  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c8  00000000  00000000  000207c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000086  00000000  00000000  00020888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000011c2  00000000  00000000  0002090e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000049a  00000000  00000000  00021ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000055e6  00000000  00000000  00021f6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000214  00000000  00000000  00027550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00027764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000018 	.word	0x20000018
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000408 	.word	0x08000408

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000001c 	.word	0x2000001c
 80001d0:	08000408 	.word	0x08000408

080001d4 <GPIO_voidSetPinMode>:
									MODE_ALTF
									MODE_ANALOG	

*/
void GPIO_voidSetPinMode(u8 copy_u8PORT, u8 copy_u8PIN, u8 copy_u8MODE)
 {
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
 80001de:	460b      	mov	r3, r1
 80001e0:	71bb      	strb	r3, [r7, #6]
 80001e2:	4613      	mov	r3, r2
 80001e4:	717b      	strb	r3, [r7, #5]
	 if((copy_u8PORT <= GPIOH_PORT) && (copy_u8PIN <= PIN15) && (copy_u8MODE <= MODE_ANALOG)){
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	2b05      	cmp	r3, #5
 80001ea:	d825      	bhi.n	8000238 <GPIO_voidSetPinMode+0x64>
 80001ec:	79bb      	ldrb	r3, [r7, #6]
 80001ee:	2b0f      	cmp	r3, #15
 80001f0:	d822      	bhi.n	8000238 <GPIO_voidSetPinMode+0x64>
 80001f2:	797b      	ldrb	r3, [r7, #5]
 80001f4:	2b03      	cmp	r3, #3
 80001f6:	d81f      	bhi.n	8000238 <GPIO_voidSetPinMode+0x64>

		 GPIO_bases[copy_u8PORT] -> MODER &= GPIO_MODER_MASK( copy_u8PIN * 2 );
 80001f8:	79fb      	ldrb	r3, [r7, #7]
 80001fa:	4a12      	ldr	r2, [pc, #72]	; (8000244 <GPIO_voidSetPinMode+0x70>)
 80001fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000200:	6819      	ldr	r1, [r3, #0]
 8000202:	79bb      	ldrb	r3, [r7, #6]
 8000204:	005b      	lsls	r3, r3, #1
 8000206:	2203      	movs	r2, #3
 8000208:	fa02 f303 	lsl.w	r3, r2, r3
 800020c:	43da      	mvns	r2, r3
 800020e:	79fb      	ldrb	r3, [r7, #7]
 8000210:	480c      	ldr	r0, [pc, #48]	; (8000244 <GPIO_voidSetPinMode+0x70>)
 8000212:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000216:	400a      	ands	r2, r1
 8000218:	601a      	str	r2, [r3, #0]
		 GPIO_bases[copy_u8PORT] -> MODER |= ( ( ( u32 ) copy_u8MODE ) << copy_u8PIN * 2 );
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	4a09      	ldr	r2, [pc, #36]	; (8000244 <GPIO_voidSetPinMode+0x70>)
 800021e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000222:	6819      	ldr	r1, [r3, #0]
 8000224:	797a      	ldrb	r2, [r7, #5]
 8000226:	79bb      	ldrb	r3, [r7, #6]
 8000228:	005b      	lsls	r3, r3, #1
 800022a:	409a      	lsls	r2, r3
 800022c:	79fb      	ldrb	r3, [r7, #7]
 800022e:	4805      	ldr	r0, [pc, #20]	; (8000244 <GPIO_voidSetPinMode+0x70>)
 8000230:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000234:	430a      	orrs	r2, r1
 8000236:	601a      	str	r2, [r3, #0]

	 }
	 else{

	 }
 }
 8000238:	bf00      	nop
 800023a:	370c      	adds	r7, #12
 800023c:	46bd      	mov	sp, r7
 800023e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000242:	4770      	bx	lr
 8000244:	20000000 	.word	0x20000000

08000248 <GPIO_voidWriteData>:
			* Function To Write Data At ODR	Value :
									 high 
									 low	
*/
void GPIO_voidWriteData(u8 copy_u8PORT ,u8 copy_u8PIN , u8 copy_u8Value )
 {
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
 800024e:	4603      	mov	r3, r0
 8000250:	71fb      	strb	r3, [r7, #7]
 8000252:	460b      	mov	r3, r1
 8000254:	71bb      	strb	r3, [r7, #6]
 8000256:	4613      	mov	r3, r2
 8000258:	717b      	strb	r3, [r7, #5]
	 if((copy_u8PORT <= GPIOH_PORT) && (copy_u8PIN <= PIN15)){
 800025a:	79fb      	ldrb	r3, [r7, #7]
 800025c:	2b05      	cmp	r3, #5
 800025e:	d820      	bhi.n	80002a2 <GPIO_voidWriteData+0x5a>
 8000260:	79bb      	ldrb	r3, [r7, #6]
 8000262:	2b0f      	cmp	r3, #15
 8000264:	d81d      	bhi.n	80002a2 <GPIO_voidWriteData+0x5a>
		GPIO_bases[copy_u8PORT] -> ODR &= GPIO_ODR_MASK( copy_u8PIN );
 8000266:	79fb      	ldrb	r3, [r7, #7]
 8000268:	4a11      	ldr	r2, [pc, #68]	; (80002b0 <GPIO_voidWriteData+0x68>)
 800026a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800026e:	6959      	ldr	r1, [r3, #20]
 8000270:	79bb      	ldrb	r3, [r7, #6]
 8000272:	2201      	movs	r2, #1
 8000274:	fa02 f303 	lsl.w	r3, r2, r3
 8000278:	43da      	mvns	r2, r3
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	480c      	ldr	r0, [pc, #48]	; (80002b0 <GPIO_voidWriteData+0x68>)
 800027e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000282:	400a      	ands	r2, r1
 8000284:	615a      	str	r2, [r3, #20]
		GPIO_bases[copy_u8PORT] -> ODR |= ( ( ( u32 ) copy_u8Value ) << copy_u8PIN );
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	4a09      	ldr	r2, [pc, #36]	; (80002b0 <GPIO_voidWriteData+0x68>)
 800028a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800028e:	6959      	ldr	r1, [r3, #20]
 8000290:	797a      	ldrb	r2, [r7, #5]
 8000292:	79bb      	ldrb	r3, [r7, #6]
 8000294:	409a      	lsls	r2, r3
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	4805      	ldr	r0, [pc, #20]	; (80002b0 <GPIO_voidWriteData+0x68>)
 800029a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800029e:	430a      	orrs	r2, r1
 80002a0:	615a      	str	r2, [r3, #20]
	 }
	 else{
	 }
}
 80002a2:	bf00      	nop
 80002a4:	370c      	adds	r7, #12
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	20000000 	.word	0x20000000

080002b4 <RCC_voidInitSysClock>:
												*( M N P Q )      	: By #define


*/
void RCC_voidInitSysClock(void )
{
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0

	// Configuring the clock source

#if		RCC_Clk_SRC == RCC_HSI
	// Set the HSI on bit to enable
	set_bit(RCC_CR, RCC_HSION_bit);
 80002b8:	4b1d      	ldr	r3, [pc, #116]	; (8000330 <RCC_voidInitSysClock+0x7c>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a1c      	ldr	r2, [pc, #112]	; (8000330 <RCC_voidInitSysClock+0x7c>)
 80002be:	f043 0301 	orr.w	r3, r3, #1
 80002c2:	6013      	str	r3, [r2, #0]
	#endif

#endif

	// Mask the clock configuration register
	RCC_PLLCFGR &= RCC_CFGR_mask;
 80002c4:	4b1b      	ldr	r3, [pc, #108]	; (8000334 <RCC_voidInitSysClock+0x80>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a1a      	ldr	r2, [pc, #104]	; (8000334 <RCC_voidInitSysClock+0x80>)
 80002ca:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 80002ce:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 80002d2:	6013      	str	r3, [r2, #0]
	//while(get_bit(RCC_CR, RCC_PLLRDY_bit));

#else
	#if		RCC_Clk_SRC == RCC_HSI
		// Select the HSI clk source
		RCC_PLLCFGR |= RCC_HSI_Clk_Src;
 80002d4:	4b17      	ldr	r3, [pc, #92]	; (8000334 <RCC_voidInitSysClock+0x80>)
 80002d6:	4a17      	ldr	r2, [pc, #92]	; (8000334 <RCC_voidInitSysClock+0x80>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	6013      	str	r3, [r2, #0]

	#endif
#endif

	// Setting the AHP pre-scaler
	RCC_CFGR |= (RCC_HPRE << RCC_PRE_bit);
 80002dc:	4b16      	ldr	r3, [pc, #88]	; (8000338 <RCC_voidInitSysClock+0x84>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a15      	ldr	r2, [pc, #84]	; (8000338 <RCC_voidInitSysClock+0x84>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6013      	str	r3, [r2, #0]
	// Setting the APB1 pre-scaler
	RCC_CFGR |= (RCC_PPRE1 << RCC_PPRE1_bit);
 80002e8:	4b13      	ldr	r3, [pc, #76]	; (8000338 <RCC_voidInitSysClock+0x84>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a12      	ldr	r2, [pc, #72]	; (8000338 <RCC_voidInitSysClock+0x84>)
 80002ee:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80002f2:	6013      	str	r3, [r2, #0]
	// Setting the APB2 pre-scaler
	RCC_CFGR |= (RCC_PPRE2 << RCC_PPRE2_bit);
 80002f4:	4b10      	ldr	r3, [pc, #64]	; (8000338 <RCC_voidInitSysClock+0x84>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a0f      	ldr	r2, [pc, #60]	; (8000338 <RCC_voidInitSysClock+0x84>)
 80002fa:	f443 3320 	orr.w	r3, r3, #163840	; 0x28000
 80002fe:	6013      	str	r3, [r2, #0]

	// Enable and disable peripherals of Bus AHB1
	RCC_AHB1ENR |= RCC_AHB1LPENR_init;
 8000300:	4b0e      	ldr	r3, [pc, #56]	; (800033c <RCC_voidInitSysClock+0x88>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a0d      	ldr	r2, [pc, #52]	; (800033c <RCC_voidInitSysClock+0x88>)
 8000306:	f043 039f 	orr.w	r3, r3, #159	; 0x9f
 800030a:	6013      	str	r3, [r2, #0]
	// Enable and disable peripherals of Bus AHB1
	RCC_AHB2ENR |= RCC_AHB2LPENR_init;
 800030c:	4b0c      	ldr	r3, [pc, #48]	; (8000340 <RCC_voidInitSysClock+0x8c>)
 800030e:	4a0c      	ldr	r2, [pc, #48]	; (8000340 <RCC_voidInitSysClock+0x8c>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	6013      	str	r3, [r2, #0]
	// Enable and disable peripherals of Bus ABP1
	RCC_APB1ENR |= RCC_APB1LPENR_init;
 8000314:	4b0b      	ldr	r3, [pc, #44]	; (8000344 <RCC_voidInitSysClock+0x90>)
 8000316:	4a0b      	ldr	r2, [pc, #44]	; (8000344 <RCC_voidInitSysClock+0x90>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	6013      	str	r3, [r2, #0]
	// Enable and disable peripherals of Bus ABP2
	RCC_APB2ENR |= RCC_APB2LPENR_init;
 800031c:	4b0a      	ldr	r3, [pc, #40]	; (8000348 <RCC_voidInitSysClock+0x94>)
 800031e:	4a0a      	ldr	r2, [pc, #40]	; (8000348 <RCC_voidInitSysClock+0x94>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	6013      	str	r3, [r2, #0]
}
 8000324:	bf00      	nop
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40023800 	.word	0x40023800
 8000334:	40023804 	.word	0x40023804
 8000338:	40023808 	.word	0x40023808
 800033c:	40023830 	.word	0x40023830
 8000340:	40023834 	.word	0x40023834
 8000344:	40023840 	.word	0x40023840
 8000348:	40023844 	.word	0x40023844

0800034c <main>:

#include "../Inc/RCC_interface.h"
#include "../Inc/GPIO_interface.h"


int main(void){
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0

	RCC_voidInitSysClock();
 8000350:	f7ff ffb0 	bl	80002b4 <RCC_voidInitSysClock>

	GPIO_voidSetPinMode(GPIOA_PORT, PIN5, MODE_OUTPUT);
 8000354:	2201      	movs	r2, #1
 8000356:	2105      	movs	r1, #5
 8000358:	2000      	movs	r0, #0
 800035a:	f7ff ff3b 	bl	80001d4 <GPIO_voidSetPinMode>
	GPIO_voidWriteData(GPIOA_PORT, PIN5, HIGH);
 800035e:	2201      	movs	r2, #1
 8000360:	2105      	movs	r1, #5
 8000362:	2000      	movs	r0, #0
 8000364:	f7ff ff70 	bl	8000248 <GPIO_voidWriteData>


	while(1){
 8000368:	e7fe      	b.n	8000368 <main+0x1c>
	...

0800036c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800036c:	480d      	ldr	r0, [pc, #52]	; (80003a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800036e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000370:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000374:	480c      	ldr	r0, [pc, #48]	; (80003a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000376:	490d      	ldr	r1, [pc, #52]	; (80003ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000378:	4a0d      	ldr	r2, [pc, #52]	; (80003b0 <LoopForever+0xe>)
  movs r3, #0
 800037a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800037c:	e002      	b.n	8000384 <LoopCopyDataInit>

0800037e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800037e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000382:	3304      	adds	r3, #4

08000384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000388:	d3f9      	bcc.n	800037e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800038a:	4a0a      	ldr	r2, [pc, #40]	; (80003b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800038c:	4c0a      	ldr	r4, [pc, #40]	; (80003b8 <LoopForever+0x16>)
  movs r3, #0
 800038e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000390:	e001      	b.n	8000396 <LoopFillZerobss>

08000392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000394:	3204      	adds	r2, #4

08000396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000398:	d3fb      	bcc.n	8000392 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800039a:	f000 f811 	bl	80003c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800039e:	f7ff ffd5 	bl	800034c <main>

080003a2 <LoopForever>:

LoopForever:
  b LoopForever
 80003a2:	e7fe      	b.n	80003a2 <LoopForever>
  ldr   r0, =_estack
 80003a4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80003a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003ac:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80003b0:	08000428 	.word	0x08000428
  ldr r2, =_sbss
 80003b4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80003b8:	20000034 	.word	0x20000034

080003bc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003bc:	e7fe      	b.n	80003bc <ADC_IRQHandler>
	...

080003c0 <__libc_init_array>:
 80003c0:	b570      	push	{r4, r5, r6, lr}
 80003c2:	4d0d      	ldr	r5, [pc, #52]	; (80003f8 <__libc_init_array+0x38>)
 80003c4:	4c0d      	ldr	r4, [pc, #52]	; (80003fc <__libc_init_array+0x3c>)
 80003c6:	1b64      	subs	r4, r4, r5
 80003c8:	10a4      	asrs	r4, r4, #2
 80003ca:	2600      	movs	r6, #0
 80003cc:	42a6      	cmp	r6, r4
 80003ce:	d109      	bne.n	80003e4 <__libc_init_array+0x24>
 80003d0:	4d0b      	ldr	r5, [pc, #44]	; (8000400 <__libc_init_array+0x40>)
 80003d2:	4c0c      	ldr	r4, [pc, #48]	; (8000404 <__libc_init_array+0x44>)
 80003d4:	f000 f818 	bl	8000408 <_init>
 80003d8:	1b64      	subs	r4, r4, r5
 80003da:	10a4      	asrs	r4, r4, #2
 80003dc:	2600      	movs	r6, #0
 80003de:	42a6      	cmp	r6, r4
 80003e0:	d105      	bne.n	80003ee <__libc_init_array+0x2e>
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e8:	4798      	blx	r3
 80003ea:	3601      	adds	r6, #1
 80003ec:	e7ee      	b.n	80003cc <__libc_init_array+0xc>
 80003ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80003f2:	4798      	blx	r3
 80003f4:	3601      	adds	r6, #1
 80003f6:	e7f2      	b.n	80003de <__libc_init_array+0x1e>
 80003f8:	08000420 	.word	0x08000420
 80003fc:	08000420 	.word	0x08000420
 8000400:	08000420 	.word	0x08000420
 8000404:	08000424 	.word	0x08000424

08000408 <_init>:
 8000408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800040a:	bf00      	nop
 800040c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040e:	bc08      	pop	{r3}
 8000410:	469e      	mov	lr, r3
 8000412:	4770      	bx	lr

08000414 <_fini>:
 8000414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000416:	bf00      	nop
 8000418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800041a:	bc08      	pop	{r3}
 800041c:	469e      	mov	lr, r3
 800041e:	4770      	bx	lr
